(DEF SIMPLIFY (LAMBDA (FUNC)
	(COND ((ATOM FUNC) FUNC) (T
	(SETQ ARGS (MAPCAR SIMPLIFY (CDR FUNC)))
	(SETQ FNAME (CAR FUNC))
	(SETQ FUNC (CONS FNAME ARGS))
	(COND
	((ALLNUMS ARGS) (COND
	((MEMBER FNAME '(ADD SUB MUL POW POLY)) (EVAL FUNC))
	(T FUNC)))
	((EQ 'ADD FNAME) (COND
	((EQ (CAR ARGS) 0) (CADR ARGS))
	((EQ (CADR ARGS) 0) (CAR ARGS))
	(T FUNC)))
	((EQ 'SUB FNAME) (COND
	((EQ (CADR ARGS) 0) (CAR ARGS))
	((EQ (CAR ARGS)0) (COND
	
((ATOM (CADR ARGS)) FUNC)
	
((EQ 'SUB (CAR (CADR ARGS))) (SIMPLIFY
	(LIST 'SUB (CADDR (CADR ARGS)) (CADR (CADR ARGS)))))
	
(T FUNC)))
	(T FUNC)))
	((EQ 'MUL FNAME) (COND
	((MEMBER 0 ARGS) 0)
	((EQ (CAR ARGS) 1) (CADR ARGS))
	((EQ(CADR ARGS) 1) (CAR ARGS))
	(T FUNC)))
	((EQ 'POW FNAME) (COND
	((MEMBER (CAR ARGS) '(0 1)) (CAR ARGS))
	((EQ (CADR ARGS) 0) 1)
	((EQ (CADR ARGS) 1) (CAR ARGS))
	(T FUNC)))
	((EQ 'POLY FNAME) (COND
	((ALLEQ 0 (CDR ARGS)) 0)
	((ALLEQ 0 (CDDR ARGS)) (CADR ARGS))
	((EQ (CAR ARGS) 0) 0)
	((NUMBER (CAR ARGS)) (SIMPLIFY
	
(POLYEXPAND (CAR ARGS) (CDR ARGS))))
	(T FUNC)))
	(T FUNC)]

(DEF ALLEQ (LAMBDA (V L)
	(COND
	((ATOM L) T)
	((EQ V (CAR L)) (ALLEQ V (CDR L)))
	(T NIL)]

(DEF ALLNUMS (LAMBDA (L)
	(COND
	((ATOM L) T)
	((NUMBER (CAR L)) (ALLNUMS (CDR L)))
	(T NIL)]

(DEF MUL (LAMBDA (A B)
	(COND
	((GREATER 0 A) (SUB 0 (MUL (SUB 0 A) B)))
	((GREATER A B) (MUL B A))
	((EQ 0 A) 0)
	(T (ADD B (MUL (SUB A 1) B)))]

(DEF POW (LAMBDA (A B)
	(COND
	((GREATER 0 B) (LIST 'POW A B))
	((EQ 0 B) 1)
	(T (MUL A (POW A (SUB B 1))))]

(DEF POLY (NLAMBDA ("L")
	(POLY2 (EVAL (CAR "L")) (MAPCAR EVAL (CDR "L"))]

(DEF POLY2 (LAMBDA (V L)
	(COND
	((ATOM L) 0)
	(T (ADD (CAR L) (MUL V (POLY2 V (CDR L)))))]

(DEF POLYEXPAND (LAMBDA (V L)
	(COND
	((ATOM L) 0)
	(T (LIST 'ADD (CAR L) (LIST 'MUL V (POLYEXPAND V (CDR L)))))]


