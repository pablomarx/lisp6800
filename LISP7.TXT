 NAM LISP-SUBRS3
 OPT PAG
 PAG
OBEGAD EQU $11E0
CAR EQU 0
CDR EQU 2
EOI EQU 4
*
 LIB LISPLB7
* GLOBAL VECTORS
 ORG $0100
EVAL RMB 3
READ RMB 3
PRINT RMB 3
 RMB 3
GETCEL RMB 3
FRECEL RMB 3
PUSHX RMB 3
POPX RMB 3
TOPX RMB 3
EVLATM RMB 3
SETATM RMB 3
LOOKUP RMB 3
GNXTL RMB 3
GFNXTL RMB 3
LSTINI RMB 3
LSTADD RMB 3
LSTAD2 RMB 3
LSTEND RMB 3
LSTEN0 EQU POPX
ERREX RMB 3
ATMINI RMB 3
ISDTPR RMB 3
ISATOM RMB 3
GETC RMB 3
 JMP NUMINV
NUMFRM RMB 3
FRMNUM RMB 3
PUTSYM RMB 3
PUTC RMB 3
ERRBRK RMB 3
GETSYM RMB 3
STKFRG RMB 3
GCOL RMB 3
PROPSH RMB 3
GETCAR RMB 3
ISVAR RMB 3
PRINR RMB 3
PROPOP RMB 3
*
 ORG OBEGAD
*
MAGWRD EQU $2100
* (ATOM X) RETURNS TRUE IF X EVALS TO ATOM, NUMBER, OR NIL.
ATMFUN FDB MAGWRD
 BSR GNXTA
 JSR ISATOM
 BCS FALSE
*
TRUE LDX TATOM		* RETURN 'T'
 RTS
*
FALSE LDX ZERO		* RETURN NIL
 RTS
*
NUMFUN FDB MAGWRD
 BSR GNXTA
 JSR ISATOM
 BCS FALSE
 BGE FALSE
 BRA TRUE
*
ADDFUN FDB MAGWRD
 BSR GNXTNM
 STX FLP
 BSR GNXTNM
*
ADDF2 STX NLP
 LDAA FLP+1			* ADD THEN
 ADDA NLP+1
 DAA
 STAA FLP+1
 LDAA FLP
 ADCA NLP
 DAA
 STAA FLP
 LDX FLP
 JMP NUMFRM
*
SUBFUN FDB MAGWRD
*
SUBFN1 BSR GNXTNM
 STX FLP
 BSR GNXTNM
 JSR NUMINV
 BRA ADDF2
*
GTRFUN FDB MAGWRD
 BSR SUBFN1
 JSR FRMNUM
 BLE FALSE
 BRA TRUE
*
GNXTNM LDX ALP
 JSR GNXTL
 STX ALP
 LDX XTMP
*
GNN2 JSR ISATOM
 BCS GNNERR
 BGE GNNERR
 JMP FRMNUM
*
GNNERR STX FORM		* SAVE FORM FOR ERROR PRINTOUT
 LDX #GNNEMS		* 'BAD ARG, NUMBER REQUIRED'
 JSR ERRBRK
 LDAA RSTFLG		* IN A RESET?
 BEQ GNN2
 LDX ZERO			* YEP, USE VALUE OF ZERO
 RTS
*
GNXTA LDX ALP
 JSR GNXTL
 STX ALP
 LDX XTMP
 RTS
* (CONCWHILE (COND ((...) (LIST ...)) (T NOTHING)) )
* REPEATEDLY EVALS FORM, CONCATS RESULTS TOGETHER.
* STOPS WHEN RESULT IS EOIATM (I.E. NOTHING)
CNWFUN FDB MAGWRD
 JSR LSTINI			* START UP A LIST ON STACK
 BSR GNXTA
 BCS CNWDN2			* NO ARG, RETURN NIL
 STX FLP
*
CNWEVL JSR EVAL		* EVAL ARG
 JSR ISDTPR			* IS IT A LIST?
 BEQ CNWNXT			* RESULT IS NIL, RE-EVAL
 BCS CNWDUN			* RESULT IS ATOM, END LIST WITH ATOM
 JSR LSTCON			* RESULT IS DTPR, CONCAT ON
 BCS CNWDN2			* DOESN'T END WITH NIL, END OF LOOP
*
CNWNXT LDX FLP		* RE-POINT TO BODY
 BRA CNWEVL			* AND GO RE-EVAL IT
*
CNWDUN CPX EOIATM	* "NOTHING"?
 BEQ CNWDN2			* YEP, JUST END THE LIST NORMALLY
 JSR LSTEND			* NOPE, END THE LIST WITH THE ATOM
 BRA CNWDN3
*
CNWDN2 JSR LSTEN0	* END THE LIST WITH A NIL
*
CNWDN3 JMP PROPOP	* RETURN WITH THE LIST AS VALUE
*
LSTFUN FDB MAGWRD
 LDX STKPTR			* CLEAR TOP OF STACK (TO AVOID FREEING LIST)
 CLR CAR,X
 CLR CAR+1,X
 LDX ALP			* RETURN WITH ARG LST
 RTS
* CONCAT A LIST TO LIST AT TOP OF STACK
* RETURN WITH C-BIT SET IF CDR OF LAST DTPR NON-NIL
LSTCON STX FORM
 JSR TOPX			* GET POINTER TO LIST
 LDAA FORM			* FILL IN NEW CDR
 STAA CDR,X
 LDAA FORM+1
 STAA CDR+1,X
*
LSTC2 STX XTMP2		* SAVE POINTER TO LAST CELL
 LDX CDR,X			* NOW POINT TO NEXT CELL IN LIST
 JSR ISDTPR			* IS IT A DTPR?
 BCC LSTC2			* YEP, KEEP LOOKING
 BNE LSTC3			* SKIP THE CLC(??) IF NON-NIL CDR
 CLC
*
LSTC3 LDX STKPTR	* FILL IN NEW VALUE FOR LIST POINTER
 LDAA XTMP2
 STAA CAR,X
 LDAA XTMP2+1
 STAA CAR+1,X
 LDX FORM			* RESTORE X-REG
 RTS				* RETURN WITH C-BIT CORRECT
* (EVALLIST (CDR L))
* EVAL ALL ELEMENTS OF ARG (ASSUMED TO BE A LIST)
* RETURN WITH VALUE OF LAST ONE
EVLSFN FDB MAGWRD
 LDX ALP
 JSR ISDTPR
 BCS EVLLS2			* NOT A DTPR, JUST RETURN THIS
 LDX CAR,X			* GET ARG (SHOULD BE A LIST)
 BRA EVLLS2			* AND CONTINUE WITH PROGN CODE
* (PROGN A B C D)
* EVALS ALL ARGS AND RETURNS THE VALUE OF THE LAST ONE
PGNFUN FDB MAGWRD
 LDX ALP
*
EVLLS2 STX FLP		* INITIALIZE RETURN VALUE
*
PGNFN2 JSR ISDTPR
 BCS PGNDUN
 STX ALP
 LDX CAR,X			* EVAL CAR
 JSR EVAL
 STX FLP
 LDX ALP
 LDX CDR,X			* SCAN TO END OF LIST
 BRA PGNFN2
*
PGNDUN LDX FLP		* RETURN WITH LAST VAL
 RTS
* EXPECTS NUMBER IN X-REG (BCD 10'S COMPLEMENT)
* PRODUCES 10'S COMPLEMENT
NUMINV STX XTMP
 BEQ NMIVRT			* IS IT ZERO, SAVE OUR BREATH
 LDAA #$99			* FIRST GET 9'S COMPLEMENT
 TAB
 SUBB XTMP
 SUBA XTMP+1
 ADDA #1			* NOW ADD 1 TO GET 10'S COMPLEMENT
 DAA
 STAA XTMP+1
 TBA
 ADCA #0			* FIXUP HIGH DIGITS
 DAA
 STAA XTMP
 LDX XTMP
*
NMIVRT RTS
*
RSTFUN FDB MAGWRD
*
RSTFN2 LDAA #-1
*
RSTFN3 STAA RSTFLG
*
RTNEOI LDX EOIATM
*
BTFRTN RTS
*
RTBFUN FDB MAGWRD
 JSR GNXTA
 JSR ISATOM
 BCS RTBFN2
 BGE RTBFN2
 JSR FRMNUM
 BLE RSTFN2			* ZERO OR NEG., SAME AS FULL RESET
 STX XTMP
 LDAA XTMP+1		* SET UP RSTFLG
 BRA RSTFN3
*
RTBFN2 LDAA #$FF-'0	* FORCE RESET TO CURRENT BREAK LEVEL
 BRA RSTFN3
*
BRKFUN FDB MAGWRD
 LDX ZERO
 STX FORM
 LDX #BRKMSG
 JMP ERRBRK
*
BTFUN FDB MAGWRD
 CLR FLP+1
 JSR GNXTA			* IF ARG IS A NUMBER, RETURN FUN THAT FAR BACK ON CUREVL
 JSR ISATOM
 BCS BTFUN1
 BGE BTFUN1
 JSR FRMNUM
 STX FLP
*
BTFUN1 LDX CUREVL	* PRINT OUR CAR'S OF CUREVL LIST
 STX ALP
*
BTFUN2 JSR GNXTA
 BCS RTNEOI			* RETURN EOI SO NO PRINT OUT
 LDAA FLP+1
 ADDA #$99			* SUBTRACT 1 (BCD-WISE)
 DAA
 STAA FLP+1
 BEQ BTFRTN
 JSR GETCAR
 JSR PRINT
 BRA BTFUN2
*
SUBLS3 FCC 'ATOM'
 FCB 0
 FDB ATMFUN
 FCC 'NUMBER'
 FCB 0
 FDB NUMFUN
 FCC 'ADD'
 FCB 0
 FDB ADDFUN
 FCC 'SUB'
 FCB 0
 FDB SUBFUN
 FCC 'GREATER'
 FCB 0
 FDB GTRFUN
 FCC 'LIST'
 FCB 0
 FDB LSTFUN
 FCC 'EVALLIST'
 FCB 0
 FDB EVLSFN
 FCC 'RETBRK'
 FCB 0
 FDB RTBFUN
 FCC 'BT'
 FCB 0
 FDB BTFUN
*
 FCB 0
NSUBL3 FCC 'PROGN'
 FCB 0
 FDB PGNFUN
 FCC 'CONCWHILE'
 FCB 0
 FDB CNWFUN
 FCC 'RESET'
 FCB 0
 FDB RSTFUN
 FCC 'BREAK'
 FCB 0
 FDB BRKFUN
*
 FCB 0
GNNEMS FCC 'NUMBER REQUIRED'
 FCB 4
BRKMSG FCC 'BREAKING...'
 FCB 4
*
BEGADR EQU *
 END

