 NAM LISP-SUBRS1
 OPT PAG
 PAG
OBEGADD EQU $0BB0
CAR EQU 0
CDR EQU 2
EOI EQU 4
*
 LIB LISPLB
* GLOBAL VECTORS
 ORG $0100
EVAL RMB 3
READ RMB 3
PRINT RMB 3
 RMB 3
GETCEL RMB 3
FRECEL RMB 3
PUSHX RMB 3
POPX RMB 3
TOPX RMB 3
EVLATM RMB 3
SETATM RMB 3
LOOKUP RMB 3
GNXTL RMB 3
GFNXTL RMB 3
LSTINI RMB 3
LSTADD RMB 3
LSTAD2 RMB 3
LSTEND RMB 3
LSTEN0 EQU POPX
ERREX RMB 3
 JMP ATMINI
ISDTPR RMB 3
ISATOM RMB 3
GETC RMB 3
NUMINV RMB 3
NUMFRM RMB 3
FRMNUM RMB 3
PUTSYM RMB 3
PUTC RMB 3
ERRBRK RMB 3
GETSYM RMB 3
STKFRG RMB 3
GCOL RMB 3
PROPSH RMB 3
GETCAR RMB 3
ISVAR RMB 3
PRINR RMB 3
PROPOP RMB 3
*
 ORG OBEGAD
WARMS EQU $AD03			* RETURN ADDRESS FOR (SYS)
NOTHAT EQU FLP			* JUST USE TEMPORARIL
* INITIALIZE BUILT-IN ATOMS
* IN THE FORM OF NULL-TERM'D STRING
* FOLLOWED BY 8-BIT ADDR
ATMINI LDX #ATILST		* POINT TO BEGINNING OF ATOMS
 STX SYMPTR
ATI2 JSR LOOKUP			* LOOK IT UP, AND PUT ON SYMLST
* (RESULT FROM LOOKUP ALSO IN FORM)
 LDX SYMPTR				* SCAN TO END OF ATOM NAME
ATI3 INX
 TST 0,X
 BNE ATI3
 STX SYMPTR				* SAVE POINTER
 LDX 0,X				* GET ADDR OF SLUT (NULL IS HIGH, 8 BITS)
 LDAA FORM				* STORE ADDR OF ATOM
 STAA 0,X
 LDAA FORM+1
 STAA 1,X
 LDX SYMPTR				* POINT TO NEXT NAME (IF ANY)
 INX
 INX
 TST 0,X				* AT END OF LIST?
 BNE ATI2
* YEP, ALL DONE
* INITIALIZE EOIATM
 LDX #EOINAM
 JSR LOOKUP
 STX EOIATM
* INITIALIZE "NOTHING" AND EOIATM TO POINT TO EOIATM
 BSR SSETAT
 LDX NOTHAT
* (EOIATM STILL STORED IN "FORM")
 BSR SSETAT
* INITIALIZE TATOM TO POINT TO ITSELF
 LDX TATOM
 STX CDR-1,X
*
 LDX #SUBRLS			* INITIALIZE PRIMARY SUBRS AND NSUBRS
 BSR SNSINI
 LDX SUBRAT				* COPY SELFUN TO LAMBDA/NLAMBDA
 LDX CDR-1,X
 STX FORM
 LDX NSUBAT
 BSR SSETAT
 LDX LAMATM
 BSR SSETAT
 LDX NLAMAT
 BSR SSETAT
 LDX CONATM
 BSR SSETAT
 LDX SUBLS2				* INITIALIZE SECONDARY LISTS
 BSR SNSINI
 LDX SUBLS3				* INITIALIZE TERITARY LISTS
 BRA SNSINI
*
SSETAT JMP SETATM		* ALLOW FOR BSR'S
*
SNSINI LDAB #SUBRAT		* INITIALIZE SUBRS
 BSR SUBINI
 INX					* POINT TO NSUBR LIST
 LDAB #NSUBAT
* AND RETURN THROUGH SUBINI
* B-REG HOLDS ADDR OF ATOM (IN DIR. PAGE)
* X-REG POINTS TO LIST OF NAMES
* FOLLOWED BY ADDRESS OF FUNCTION
* FUNCTION MUST START WITH FCB '! ; FCB 0
SUBINI STX SYMPTR
 CLR XTMP
 STAB XTMP+1
 LDX XTMP				* GET SUBR OR NSUBR ATOM
 LDX 0,X
 STX ALP				* SAVE IT
*
SBILUP LDX SYMPTR		* POINT TO ATOM NAME
 TST 0,X				* ALL DONE?
 BEQ SBIRT				* YUP
 JSR LOOKUP				* FORM ATOM (RETURNED IN 'FORM')
 STX NLP				* SAVE IT FOR LATER
 LDX SYMPTR				* SKIP PAST ATOM NAME
SBILP2 INX
 TST 0,X
 BNE SBILP2
 INX					* POINT TO FUNCTIONA ADDR
 STX SYMPTR				* SAVE FOR LATER
 LDX 0,X				* GET FUNC POINTER
 LDAA 0,X				* CHECK FOR MAGIC BYTES
 CMPA #'!
 BNE SBIBAD
 TST 1,X
 BNE SBIBAD
 STX FLP				* SAVE FUNC POINTER
 JSR GETCEL				* GET A CELL FOR FUNC PSEUDO ATOM
 LDAA FLP				* FILL IN CAR
 STAA CAR,X
 LDAA FLP+1
 STAA CAR+1,X
 INX					* MAKE AN ATOM-LIKE POINTER
 STX FORM				* SAVE IN FORM FOR SAFETY
 JSR GETCEL				* GET A CELL FOR (SUBR.FUNCAD)
 LDAA ALP				* FILL IN CAR
 STAA CAR,X
 LDAA ALP+1
 STAA CAR+1,X
 LDAA FORM				* FILL IN CDR
 STAA CDR,X
 LDAA FORM+1
 STAA CDR+1,X
 STX FORM				* SET UP FOR SETATM
 LDX NLP				* GET ATOM
 JSR SETATM
 LDX SYMPTR				* INCREMENT PAST FUNC ADDR
 INX
 INX
 STX SYMPTR
 BRA SBILUP				* AND LOOP AROUND
*
SBIRT RTS
*
SBIBAD LDX #SBIEMS		* 'BAD SUBR/NSUBR IN SUBINI
 JMP ERREX
*
MAGWRD EQU $2100
SELFUN FDB MAGWRD		* MAGIC BYTES
* RETURN SELF AS VALUE (USED FOR LAMBDA/NLAMBDA/SUBR/NSUBR/CONT)
 LDX CUREVL
 LDX CAR,X
 RTS
*
SYSFUN FDB MAGWRD
* (SYS) RETURN TO DOS
 JMP WARMS
*
EVLFUN FDB MAGWRD
* GET FIRST ARG
 BSR GCARA
 JMP EVAL				* AND EVAL IT, AND RETURN
*
REDFUN FDB MAGWRD
 JMP READ
*
PRIFUN FDB MAGWRD
* GET FIRST ARG
 BSR GCARA
 JMP PRINT
*
CARFUN FDB MAGWRD
* GET FIRST ARG
 BSR GCARA
 JSR ISDTPR
 BEQ CARNIL				* RETURN EOIATM AS (CAR NIL)
 BCS CARERR				* OOPS!
 LDX CAR,X
 RTS
*
CARNIL LDX EOIATM
 RTS
*
CDRFUN FDB MAGWRD
* GET FIRST ARG
 BSR GCARA
 JSR ISDTPR
 BCS CARERR				* OOPS !
 LDX CDR,X
 RTS
*
CARERR LDX #CADEMS		* 'BAD ARG TO CAR/CDR'
 JMP ERRBRK				* RETURN THROUGH ERRBRK
*
CNSFUN FDB MAGWRD
 BSR GNXTA				* GET NEW CAR
 STX FLP				* SAVE IT
 BSR GCARA				* GET NEW CDR
 STX NLP				* SAVE IT
 JSR GETCEL
 LDAA FLP
 STAA CAR,X				* FILL IN CAR AND CDR
 LDAA FLP+1
 STAA CAR+1,X
 LDAA NLP
 STAA CDR,X
 LDAA NLP+1
 STAA CDR+1,X
 RTS
*
QUTFUN FDB MAGWRD
ERRBRK BSR GCARA
 RTS
*
SETFUN FDB MAGWRD
 BSR GNXTA
 JSR ISVAR
 BCS SETERR
 STX NLP
 BSR GCARA				* GET VALUE
 STX FORM				* SET UP FOR SETATM
 LDX NLP
 JSR SETATM
 LDX FORM				* RETURN WITH VALUE OF ATOM
 RTS
*
SETERR STX FORM			* SAVE FORM FOR PRINTOUT
 LDX #SETEMS			* 'BAD ARG TO SET/PATOM'
 JMP ERRBRK				* RETURN THROUGH ERRBRK
*
GCARA LDX ALP
 JMP GETCAR
*
GNXTA LDX ALP
 JSR GNXTL
 STX ALP
 LDX XTMP
 RTS
*
EQFUN FDB MAGWRD
 BSR GNXTA				* COMPARE THE TWO ARGS
 STX FORM
 BSR GCARA
 CPX FORM
 BEQ EQYES
 LDX ZERO				* RETURN WITH NIL
 RTS
*
EQYES LDX TATOM			* RETURN WITH 'T'
 RTS
* (COND (P1 E1) (P2 E2) ... (T ET))
CNDFUN FDB MAGWRD
CNDLUP BSR GNXTA		* GET NEXT (P E ...)
 BCS CNDRT				* ALL DONE (VALUE = NIL)
 JSR ISDTPR				* IS IT A DTPR?
 BCS CNDERT				* NOPE, EVAL AND RETURN
 LDAA CDR,X				* ADVANCE NLP AND GET FIRST ELEM
 STAA NLP
 LDAA CDR+1,X
 STAA NLP+1
 LDX CAR,X
 CPX TATOM				* IS IT = 'T'
 BEQ CNDTRU				* YUP, ALWAYS TRUE
 JSR EVAL				* EVAL IT
 STX FORM
 BEQ CNDLUP				* LOOP AROUND IF = NIL(FALSE)
*
CNDTRU LDX NLP			* PICK UP FIRST 'E'
 STX FORM				* INITIALIZE FORM IN CASE NO 'E'S
*
CNDTLP JSR GNXTL
 BCS CNDFRT				* ALL DONE, RETURN WITH 'FORM'
 STX NLP
 LDX XTMP
 JSR EVAL				* EVAL THE 'E'
 LDX NLP				* POINT TO NEXT 'E'
 BGT CNDTLP				* AND LOOP
*
CNDFRT LDX FORM
CNDRT RTS
*
CNDERT JMP EVAL			* EVAL AND RETURN
*
PATFUN FDB MAGWRD
 BSR GCARA				* GET FIRST ARG
 JSR ISATOM				* IS IT AN ATOM?
 BCS SETERR				* NOPE!
 BGT PATF2
*
PATF1 JMP PUTSYM		* NIL OR NUMBER, JUST LET PUTSYM TAKE IT
*
PATF2 STX FORM			* SAVE FORM
 DEX					* GET PRINT NAME POINTER
 LDX CAR,X
 LDAA 0,X				* IS IT QUOTED?
 CMPA #'"
 BEQ PATF3
 LDX FORM				* NOPE, LET PRINT TAKE OVER
 BRA PATF1
*
PATF3 INX
 LDAA 0,X
 BEQ PATFRT				* ALL DONE
 CMPA #'"				* IS IT A "?
 BNE PATF4				* NOPE, JUST PRINT IT
 INX					* YEP, ADVANCE TO NEXT CHAR
 LDAA 0,X
 BEQ PATFRT				* ALL DONE
*
PATF4 JSR PUTC
 BRA PATF3				* PRINT IT AND LOOP AROUND
*
PATFRT LDX FORM			* RETURN WITH ATOM AS VALUE
 RTS
*
 LIB ATILST				* DATA FOR ATMINT SUBR
*
BEGADR EQU *
 END

